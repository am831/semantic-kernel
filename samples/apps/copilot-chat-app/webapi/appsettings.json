//
// # CopilotChat Application Settings
//
// # Quickstart
//  - Update the "Completion" and "Embedding" sections below to use your AI services.
//
// # Secrets
// Consider populating secrets, such as "Key" and "ConnectionString" properties, using dotnet's user-secrets command when running locally.
// https://learn.microsoft.com/en-us/aspnet/core/security/app-secrets?view=aspnetcore-7.0&tabs=windows#secret-manager
// Values in user secrets and (optionally) Key Vault take precedence over those in this file.
//
{
  //
  // Service configuration
  // - Optionally set SemanticSkillsDirectory to the directory from which to load semantic skills (e.g., "./SemanticSkills").
  // - Optionally set KeyVaultUri to the URI of the Key Vault for secrets (e.g., "https://contoso.vault.azure.net/").
  //
  "Service": {
    // "SemanticSkillsDirectory": "",
    // "KeyVault": ""
  },
  //
  // Default AI service configuration for generating AI responses and embeddings from the user's input.
  // https://platform.openai.com/docs/guides/chat
  // To use Azure OpenAI as the AI completion service:
  // - Set "Type" to "AzureOpenAI" 
  // - Set "Endpoint" to the endpoint of your Azure OpenAI instance (e.g., "https://contoso.openai.azure.com")
  // - Set "Key" using dotnet's user secrets (see above)
  //     (i.e. dotnet user-secrets set "AIService:Key" "MY_AZURE_OPENAI_KEY")
  //
  // To use OpenAI as the AI completion service:
  // - Set "Type" to "OpenAI"
  // - Set "Key" using dotnet's user secrets (see above)
  //     (i.e. dotnet user-secrets set "AIService:Key" "MY_OPENAI_KEY")
  //
  // - Set Completion and Planner models to a chat completion model (e.g., gpt-35-turbo, gpt-4).
  // - Set the Embedding model to an embedding model (e.g., "text-embedding-ada-002").
  //
  "AIService": {
    "Type": "AzureOpenAI",
    "Endpoint": "", // ignored when AIService is "OpenAI"
    // "Key": "",
    "Models": {
      "Completion": "gpt-35-turbo", // For OpenAI, change to 'gpt-3.5-turbo' (with a period).
      "Embedding": "text-embedding-ada-002",
      "Planner": "gpt-35-turbo" // For OpenAI, change to 'gpt-3.5-turbo' (with a period).
    }
  },
  //
  // Planner can determine which skill functions, if any, need to be used to fulfill a user's request.
  // https://learn.microsoft.com/en-us/semantic-kernel/concepts-sk/planner
  // - Set Planner:Type to "Action" to use the single-step ActionPlanner (default)
  // - Set Planner:Type to "Sequential" to enable the multi-step SequentialPlanner
  //   See the "Enabling Sequential Planner" section in webapi/README.md for configuration instructions.
  //
  "Planner": {
    "Type": "Action"
  },
  //
  // Optional Azure Speech service configuration for providing Azure Speech access tokens.
  // - Set the Region to the region of your Azure Speech resource (e.g., "westus").
  // - Set the Key using dotnet's user secrets (see above)
  //     (i.e. dotnet user-secrets set "AzureSpeech:Key" "MY_AZURE_SPEECH_KEY")
  //
  "AzureSpeech": {
    "Region": ""
    // "Key": ""
  },
  //
  // Authorization configuration to gate access to the service.
  // - Supported Types are "None", "ApiKey", or "AzureAd".
  // - Set ApiKey using dotnet's user secrets (see above)
  //     (i.e. dotnet user-secret set "Authorization:ApiKey" "MY_API_KEY")
  //
  "Authorization": {
    "Type": "None",
    "ApiKey": "",
    "AzureAd": {
      "Instance": "https://login.microsoftonline.com/",
      "TenantId": "",
      "ClientId": "",
      "Scopes": "access_as_user" // Scopes that the client app requires to access the API
    }
  },
  //
  // Chat stores are used for storing chat sessions and messages.
  // - Supported Types are "volatile", "filesystem", or "cosmos".
  // - Set "ChatStore:Cosmos:ConnectionString" using dotnet's user secrets (see above)
  //     (i.e. dotnet user-secrets set "ChatStore:Cosmos:ConnectionString" "MY_COSMOS_CONNSTRING")
  //
  "ChatStore": {
    "Type": "volatile",
    "Filesystem": {
      "FilePath": "./data/chatstore.json"
    },
    "Cosmos": {
      "Database": "CopilotChat",
      "ChatSessionsContainer": "chatsessions",
      "ChatMessagesContainer": "chatmessages",
      "ChatMemorySourcesContainer": "chatmemorysources",
      "ChatParticipantsContainer": "chatparticipants"
      // "ConnectionString": // dotnet user-secrets set "ChatStore:Cosmos:ConnectionString" "MY_COSMOS_CONNECTION_STRING"
    }
  },
  //
  // Memories stores are used for storing new memories and retrieving semantically similar memories.
  // - Supported Types are "volatile", "qdrant", or "azurecognitivesearch".
  // - When using Qdrant or Azure Cognitive Search, see ./README.md for deployment instructions.
  // - The "Semantic Search" feature must be enabled on Azure Cognitive Search.
  // - The Embedding configuration above will not be used when Azure Cognitive Search is selected.
  // - Set "MemoriesStore:AzureCognitiveSearch:Key" using dotnet's user secrets (see above)
  //     (i.e. dotnet user-secrets set "MemoriesStore:AzureCognitiveSearch:Key" "MY_AZCOGSRCH_KEY")
  // - Set "MemoriesStore:Qdrant:Key" using dotnet's user secrets (see above) if you are using a Qdrant Cloud instance.
  //     (i.e. dotnet user-secrets set "MemoriesStore:Qdrant:Key" "MY_QDRANTCLOUD_KEY")
  //
  "MemoriesStore": {
    "Type": "volatile",
    "Qdrant": {
      "Host": "http://localhost",
      "Port": "6333",
      "VectorSize": 1536
      // "Key":  ""
    },
    "AzureCognitiveSearch": {
      "Endpoint": ""
      // "Key": ""
    }
  },
  //
  // Document import configuration
  // - Global documents are documents that are shared across all users.
  // - User documents are documents that are specific to a user.
  // - Default token limits are suggested by OpenAI:
  // https://help.openai.com/en/articles/4936856-what-are-tokens-and-how-to-count-them
  // - Prevent large uploads by setting a file size limit (in bytes) as suggested here:
  // https://learn.microsoft.com/en-us/aspnet/core/mvc/models/file-uploads?view=aspnetcore-6.0
  //
  "DocumentMemory": {
    "GlobalDocumentCollectionName": "global-documents",
    "ChatDocumentCollectionNamePrefix": "chat-documents-",
    "DocumentLineSplitMaxTokens": 30,
    "DocumentParagraphSplitMaxLines": 100,
    "FileSizeLimit": 4000000,
    "FileCountLimit": 10
  },
  //
  // OCR support is used for allowing end users to upload images containing text in addition to text based documents.
  // - Supported Types are "none" or "tesseract".
  // - When using Tesseract OCR Support (In order to upload image file formats such as png, jpg and tiff)
  // - Obtain language data files here: https://github.com/tesseract-ocr/tessdata . 
  // - Add these files to your `data` folder or the path specified in the "FilePath" property and set the "Copy to Output Directory" value to "Copy if newer".
  //
"OcrSupport": {
    "Type": "tesseract",
    "Tesseract": {
      "Language": "eng",
      "FilePath": "./data"
    }
  },

  //
  // Prompts are used to generate responses to user messages. Certain variables are shared by many prompts;
  // - CompletionTokenLimit is the token limit of the chat model, see https://platform.openai.com/docs/models/overview
  //   and adjust the limit according to the completion model you select.
  //
  "ReusablePromptVariables": {
    "CompletionTokenLimit": 4096,

    "InitialBotMessage": "Hello, nice to meet you! How can I help you today?",
    "KnowledgeCutoffDate": "Saturday, January 1, 2022",
    "MemoryFormat": "{\"items\": [{\"label\": string, \"details\": string }]}"
  },
  // Filter for hostnames app can bind to
  "AllowedHosts": "*",
  // CORS
  "AllowedOrigins": [
    "http://localhost:3000",
    "https://localhost:3000"
  ],
  // The schema information for a serialized bot that is supported by this application.
  "BotSchema": {
    "Name": "CopilotChat",
    "Version": 1
  },
  // Server endpoints
  "Kestrel": {
    "Endpoints": {
      "Https": {
        "Url": "https://localhost:40443"
      }
    }
  },
  // Logging configuration
  "Logging": {
    "LogLevel": {
      "Default": "Warning",
      "SemanticKernel.Service": "Information",
      "Microsoft.SemanticKernel": "Information",
      "Microsoft.AspNetCore.Hosting": "Information",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  },
  //
  // Application Insights configuration
  // - Set "APPLICATIONINSIGHTS_CONNECTION_STRING" using dotnet's user secrets (see above)
  //     (i.e. dotnet user-secrets set "APPLICATIONINSIGHTS_CONNECTION_STRING" "MY_APPINS_CONNSTRING")
  //
  "APPLICATIONINSIGHTS_CONNECTION_STRING": null
}